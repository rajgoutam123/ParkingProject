// payment-service/src/main/java/com/payment/controller/PaymentController.java
package com.payment.controller;

import com.payment.dto.PaymentRequest;
import com.payment.service.PaymentService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/payments")
@RequiredArgsConstructor
@Slf4j
public class PaymentController {

    private final PaymentService paymentService;

    @PostMapping
    public ResponseEntity<String> makePayment(@Valid @RequestBody PaymentRequest request) {
        log.debug("Processing payment: {}", request);
        try {
            paymentService.processPayment(request);
            return ResponseEntity.ok("Payment successful and notification sent");
        } catch (Exception e) {
            log.error("Payment processing failed", e);
            return ResponseEntity.internalServerError().body("Payment failed");
        }
    }
}

// payment-service/src/main/java/com/payment/dto/PaymentRequest.java
package com.payment.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

@Data
public class PaymentRequest {
    @NotNull
    private Long userId;

    @NotNull
    private Double amount;

    @NotBlank
    @Email
    private String userEmail;
}

// payment-service/src/main/java/com/payment/service/PaymentService.java
package com.payment.service;

import com.payment.dto.PaymentRequest;

public interface PaymentService {
    void processPayment(PaymentRequest request);
}

// payment-service/src/main/java/com/payment/service/impl/PaymentServiceImpl.java
package com.payment.service.impl;

import com.payment.dto.PaymentRequest;
import com.payment.service.PaymentService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class PaymentServiceImpl implements PaymentService {

    private final RestTemplate restTemplate;

    @Override
    public void processPayment(PaymentRequest request) {
        try {
            // Simulate payment success
            log.debug("Payment of Rs.{} successful for user {}", request.getAmount(), request.getUserId());

            Map<String, String> notification = new HashMap<>();
            notification.put("toEmail", request.getUserEmail());
            notification.put("subject", "Payment Successful");
            notification.put("body", "Your payment of Rs. " + request.getAmount() + " was successful.");

            restTemplate.postForEntity("http://API-GATEWAY/api/notify", notification, String.class);

        } catch (Exception e) {
            log.error("Error during payment or notification", e);
            throw new RuntimeException("Payment/Notification failed", e);
        }
    }
}

// payment-service/src/main/resources/application.yml
spring:
  application:
    name: payment-service

server:
  port: 8086

# Swagger Config is auto-generated by dependency

// payment-service/src/main/java/com/payment/config/RestTemplateConfig.java
package com.payment.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class RestTemplateConfig {
    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

// payment-service/pom.xml (dependencies only)
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        <version>2.1.0</version>
    </dependency>
</dependencies>

// payment-service SQL schema
CREATE TABLE payments (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT NOT NULL,
    amount DOUBLE NOT NULL,
    email VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
